{
    "0": [
        "/*\nBy Snickeen\n*/\n#include<bits/stdc++.h>\n//#pragma comment(linker, \"/STACK:102400000,102400000\")\n#include <stdio.h>\n#include <iostream>\n#include <iomanip>\n#include <fstream>\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n#include <limits.h>\n#include <math.h>\n#include <algorithm>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <list>\n#include <map>\n#include <set>\n#include <utility>\n#include <sstream>\n#include <complex>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <functional>\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef double db;\ntypedef long double ldb;\n#define rep(i,a,b) for(i=a;i<b;i++)\n#define repu(i,a,b) for(i=a;i<=b;i++)\n#define repd(i,a,b) for(i=a;i>=b;i--)\n#define repc(i,a,b,c) for(i=a;i<b;i+=c)\n#define repcu(i,a,b,c) for(i=a;i<=b;i+=c)\n#define repcd(i,a,b,c) for(i=a;i>=b;i-=c)\n#define FIN freopen(\"input.in\",\"r\",stdin)\n#define FOUT freopen(\"output.out\",\"w\",stdout)\n#define CC(a) memset(a,0,sizeof(a))\n#define MST(a,b) memset(a,b,sizeof(a))\n#define PII pair<int,int>\n#define PLL pair<LL,LL>\n#define VI vector<int>\n#define VL vector<LL>\n#define VII vector<PII >\n#define VLL vector<PLL >\n#define all(x) x.begin(),x.end()\n#define mp make_pair\n#define pb push_back\n#define pf push_front\n#define FF first\n#define SS second\n\ntemplate<typename T>inline void gn(T &x){\n\tx=0;T f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=x*10+ch-'0';ch=getchar();}\n\tx*=f;\n}\ntemplate<typename T>inline void gt(T x){\n\tif(!x)return;\n\tgt(x/10);putchar(x%10+'0');\n}\n \nconst LL MAXN=1e5+10;\nLL t,n,m,ans;\nLL MOD=1e9+7,inf=0x1f1f1f1f;\ndb eps=1e-5;\n\nstring s,s1,s2;\nLL len;\nstring ss[4]={\"dream\",\"dreamer\",\"erase\",\"eraser\"};\n\nLL check(LL x){\n\tLL i,j,k,l;\n\tl=ss[x].size();\n\ts1=\"\";\n\tfor(i=s.size()-1,j=0;j<l&&i>=0;j++,i--){\n\t\ts1+=s[i];\n\t}\n\treverse(all(s1));\n//\tcout<<l<<\" \"<<s1<<endl;\n\trepu(i,0,3){\n\t\tif(s1==ss[i])return 1;\n\t}\n\treturn 0;\n}\n\nint main()\n{\n//\tios_base::sync_with_stdio(false);cin.tie(0);\n\tLL i,j,k,l,ca=0;\n\tcin>>s;\n\tlen=l=s.size();\n\t//reverse(all(s));\n\twhile(s.size()){\n\t\tk=0;\n\t\trepu(i,0,3){\n\t\t\tif(s.size()<ss[i].size())continue;\n\t\t\tif(check(i)){\n\t\t\t\tk=1;\n\t\t\t\tj=ss[i].size();\n\t\t\t\ts.erase(s.size()-j,j);\n//\t\t\t\tcout<<s.size()<<\" \"<<j<<\" \"<<s<<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(k==0)return cout<<\"NO\"<<endl,0;\n\t}\n\tcout<<\"YES\"<<endl;\n\treturn 0;\n}",
        0.398,
        2.845,
        8527435.35452794,
        416.0,
        0.421,
        115
    ],
    "1": [
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nconst string keywords[] = {\"dream\", \"dreamer\", \"erase\", \"eraser\"};\n\nbool canSegmentString(const string& s) {\n    int pos = s.length();\n    while (pos > 0) {\n        bool matched = false;\n        for (const string& word : keywords) {\n            if (pos >= word.length() && s.compare(pos - word.length(), word.length(), word) == 0) {\n                pos -= word.length();\n                matched = true;\n                break;\n            }\n        }\n        if (!matched) return false;\n    }\n    return true;\n}\n\nint main() {\n    string s;\n    cin >> s;\n\n    if (canSegmentString(s)) {\n        cout << \"YES\" << endl;\n    } else {\n        cout << \"NO\" << endl;\n    }\n    return 0;\n}",
        0.39,
        2.714,
        8136866.1425818885,
        480.0,
        0.449951171875,
        33
    ],
    "2": [
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nconst string keywords[] = {\"dream\", \"dreamer\", \"erase\", \"eraser\"};\n\nbool canSegmentString(const string& s) {\n    int pos = s.length();\n    while (pos > 0) {\n        bool matched = false;\n        for (const string& word : keywords) {\n            int len = word.length();\n            if (pos >= len && s.substr(pos - len, len) == word) {\n                pos -= len;\n                matched = true;\n                break;\n            }\n        }\n        if (!matched) return false;\n    }\n    return true;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    string s;\n    cin >> s;\n\n    cout << (canSegmentString(s) ? \"YES\" : \"NO\") << endl;\n    return 0;\n}\n",
        0.344,
        2.574,
        7717437.539499037,
        408.0,
        0.50262451171875,
        33
    ],
    "3": [
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nconst string keywords[] = {\"dream\", \"dreamer\", \"erase\", \"eraser\"};\n\nbool canSegmentString(const string& s) {\n    size_t pos = s.size();\n    while (pos > 0) {\n        bool matched = false;\n        for (const auto& word : keywords) {\n            size_t len = word.size();\n            if (pos >= len && equal(s.begin() + pos - len, s.begin() + pos, word.begin())) {\n                pos -= len;\n                matched = true;\n                break;\n            }\n        }\n        if (!matched) return false;\n    }\n    return true;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    string s;\n    cin >> s;\n    cout << (canSegmentString(s) ? \"YES\" : \"NO\") << endl;\n    return 0;\n}",
        0.363,
        2.719,
        8151923.165703275,
        396.0,
        0.37652587890625,
        32
    ],
    "4": [
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nconst string keywords[] = {\"dream\", \"dreamer\", \"erase\", \"eraser\"};\n\nbool canSegmentString(const string& s) {\n    size_t pos = s.size();\n    while (pos > 0) {\n        bool matched = false;\n        for (const auto& word : keywords) {\n            size_t len = word.size();\n            if (pos >= len) { \n                const char* suffixStart = s.c_str() + pos - len;\n                if (std::equal(suffixStart, suffixStart + len, word.c_str())) {\n                    pos -= len;\n                    matched = true;\n                    break;\n                }\n            }\n        }\n        if (!matched) return false;\n    }\n    return true;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    string s;\n    cin >> s;\n    cout << (canSegmentString(s) ? \"YES\" : \"NO\") << endl;\n    return 0;\n}",
        0.357,
        2.651,
        7948343.023121388,
        392.0,
        0.27838134765625,
        35
    ],
    "5": [
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nbool canSegmentString(const string& s) {\n    const vector<string> keywords_sorted = {\"eraser\", \"erase\", \"dreamer\", \"dream\"};  \n    size_t pos = s.size();\n    while (pos > 0) {\n        bool matched = false;\n        for (const auto& word : keywords_sorted) {\n            size_t len = word.size();\n            if (pos >= len && s.compare(pos - len, len, word) == 0) {\n                pos -= len;\n                matched = true;\n                break;  \n            }\n        }\n        if (!matched) return false;\n    }\n    return true;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    string s;\n    cin >> s;\n    cout << (canSegmentString(s) ? \"YES\" : \"NO\") << endl;\n    return 0;\n}",
        0.319,
        2.535,
        7600909.0635838155,
        488.0,
        0.25579833984375,
        33
    ]
}