{
    "0": [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\nint i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}",
        11.675,
        0.13,
        4633743.2,
        21103.2,
        7.667,
        26
    ],
    "1": [
        "#include <stdio.h>\n#include <string>\n#include <iostream>\nusing namespace std;\n\nbool is_palindrome(const string &str, int start, int end) {\n    while (start < end) {\n        if (str[start] != str[end]) return false;\n        ++start;\n        --end;\n    }\n    return true;\n}\n\nstring make_palindrome(const string &str) {\n    int len = str.length();\n    for (int i = 0; i < len; ++i) {\n        if (is_palindrome(str, i, len - 1)) {\n            string to_add = str.substr(0, i);\n            return str + string(to_add.rbegin(), to_add.rend());\n        }\n    }\n    return str + string(str.rbegin(), str.rend());\n}\n\n",
        1.094,
        1.094,
        0.957,
        0.999,
        1.096,
        25
    ]
}