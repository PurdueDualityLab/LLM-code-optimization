{
    "0": [
        "\npackage org.biojava.nbio.aaproperties;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.nio.CharBuffer;\nimport java.util.HashSet;\nimport java.util.Set;\n\n\npublic class Utils {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(Utils.class);\n\n\t\n\tpublic final static double roundToDecimals(double d, int c) {\n\t\tif(c < 0) return d;\n\t\tdouble p = Math.pow(10,c);\n\t\td = d * p;\n\t\tdouble tmp = Math.round(d);\n\t\treturn tmp/p;\n\t}\n\n\t\n\tpublic final static boolean doesSequenceContainInvalidChar(String sequence, Set<Character> cSet){\n\t\t\t\tfor(char c:sequence.toCharArray()){\n\t\t\t\t\tif(!cSet.contains(c)) return true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t}\n\n\t\n\tpublic final static int getNumberOfInvalidChar(String sequence,  Set<Character> cSet, boolean ignoreCase){\n\t\tchar[] cArray = ignoreCase ? sequence.toUpperCase().toCharArray(): sequence.toCharArray();\n\t\tfinal Set<Character> characterSet = cSet == null ?PeptideProperties.standardAASet: cSet ; \n\t\tint total = (int)CharBuffer.wrap(cArray).chars().filter(character -> !characterSet.contains((char)character)).count();\n\t\treturn total;\n\t}\n\n\t\n\tpublic final static String cleanSequence(String sequence, Set<Character> cSet){\n\t\tSet<Character> invalidCharSet = new HashSet<Character>();\n\t\tStringBuilder cleanSeq = new StringBuilder();\n\t\tif(cSet == null) cSet = PeptideProperties.standardAASet;\n\t\tfor(char c:sequence.toCharArray()){\n\t\t\tif(!cSet.contains(c)){\n\t\t\t\tcleanSeq.append(\"-\");\n\t\t\t\tinvalidCharSet.add(c);\n\t\t\t}else{\n\t\t\t\tcleanSeq.append(c);\n\t\t\t}\n\t\t}\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\treturn cleanSeq.toString();\n\t}\n\n\t\n\tpublic static final String checkSequence(String sequence){\n\t\treturn checkSequence(sequence, null);\n\t}\n\n\t\n\tpublic static final String checkSequence(String sequence, Set<Character> cSet){\n\t\tboolean containInvalid = false;\n\t\tif(cSet != null){\n\t\t\tcontainInvalid = sequence != null && doesSequenceContainInvalidChar(sequence, cSet);\n\t\t}else{\n\t\t\tcontainInvalid = sequence != null && doesSequenceContainInvalidChar(sequence, PeptideProperties.standardAASet);\n\t\t}\n\t\tif(containInvalid){\n\t\t\tString cSeq = cleanSequence(sequence, cSet);\n\t\t\t\n\t\t\t\n\t\t\treturn cSeq;\n\t\t}\n\t\telse{\n\t\t\treturn sequence;\n\t\t}\n\t}\n}\n",
        139.61,
        2.256,
        27019258061.0,
        21140.8,
        0.443,
        90
    ],
    "1": [
        "package org.biojava.nbio.aaproperties;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.BitSet;\nimport java.util.Set;\n\npublic class Utils {\n\n    private final static Logger logger = LoggerFactory.getLogger(Utils.class);\n\n    public final static double roundToDecimals(double d, int c) {\n        if (c < 0) return d;\n        double p = Math.pow(10, c);\n        return Math.round(d * p) / p;\n    }\n\n    public final static boolean doesSequenceContainInvalidChar(String sequence, Set<Character> cSet) {\n        BitSet charSet = new BitSet();\n        for (char c : cSet) {\n            charSet.set(c);\n        }\n        for (int i = 0; i < sequence.length(); i++) {\n            if (!charSet.get(sequence.charAt(i))) return true;\n        }\n        return false;\n    }\n\n    public final static int getNumberOfInvalidChar(String sequence, Set<Character> cSet, boolean ignoreCase) {\n        if (cSet == null) cSet = PeptideProperties.standardAASet;\n        BitSet charSet = new BitSet();\n        for (char c : cSet) {\n            charSet.set(c);\n        }\n\n        int total = 0;\n        for (int i = 0; i < sequence.length(); i++) {\n            char c = ignoreCase ? Character.toUpperCase(sequence.charAt(i)) : sequence.charAt(i);\n            if (!charSet.get(c)) total++;\n        }\n        return total;\n    }\n\n    public final static String cleanSequence(String sequence, Set<Character> cSet) {\n        if (cSet == null) cSet = PeptideProperties.standardAASet;\n        BitSet charSet = new BitSet();\n        for (char c : cSet) {\n            charSet.set(c);\n        }\n\n        StringBuilder cleanSeq = new StringBuilder(sequence.length());\n        for (int i = 0; i < sequence.length(); i++) {\n            char c = sequence.charAt(i);\n            if (!charSet.get(c)) {\n                cleanSeq.append('-');\n            } else {\n                cleanSeq.append(c);\n            }\n        }\n        return cleanSeq.toString();\n    }\n\n    public static final String checkSequence(String sequence) {\n        return checkSequence(sequence, null);\n    }\n\n    public static final String checkSequence(String sequence, Set<Character> cSet) {\n        if (sequence == null) return null;\n        if (cSet == null) {\n            cSet = PeptideProperties.standardAASet;\n        }\n\n        if (doesSequenceContainInvalidChar(sequence, cSet)) {\n            return cleanSequence(sequence, cSet);\n        }\n        return sequence;\n    }\n}",
        0.981,
        0.988,
        0.9864124368749577,
        1.0054407792108966,
        0.9888961625282167,
        79
    ],
    "2": [
        "package org.biojava.nbio.aaproperties;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.BitSet;\nimport java.util.Set;\n\npublic class Utils {\n\n    private final static Logger logger = LoggerFactory.getLogger(Utils.class);\n    private static final BitSet standardCharSet = new BitSet();\n\n    static {\n        if (PeptideProperties.standardAASet != null) {\n            for (char c : PeptideProperties.standardAASet) {\n                standardCharSet.set(c);\n            }\n        }\n    }\n\n    public final static double roundToDecimals(double d, int c) {\n        if (c < 0) return d;\n        double p = Math.pow(10, c);\n        return Math.round(d * p) / p;\n    }\n\n    private static BitSet convertToBitSet(Set<Character> cSet) {\n        BitSet bitSet = new BitSet();\n        for (char c : cSet) {\n            bitSet.set(c);\n        }\n        return bitSet;\n    }\n\n    public final static boolean doesSequenceContainInvalidChar(String sequence, Set<Character> cSet) {\n        BitSet charSet = (cSet != null) ? convertToBitSet(cSet) : standardCharSet;\n        for (int i = 0; i < sequence.length(); i++) {\n            if (!charSet.get(sequence.charAt(i))) return true;\n        }\n        return false;\n    }\n\n    public final static int getNumberOfInvalidChar(String sequence, Set<Character> cSet, boolean ignoreCase) {\n        BitSet charSet = (cSet != null) ? convertToBitSet(cSet) : standardCharSet;\n        String processedSequence = ignoreCase ? sequence.toUpperCase() : sequence;\n\n        int total = 0;\n        for (int i = 0; i < processedSequence.length(); i++) {\n            if (!charSet.get(processedSequence.charAt(i))) total++;\n        }\n        return total;\n    }\n\n    public final static String cleanSequence(String sequence, Set<Character> cSet) {\n        BitSet charSet = (cSet != null) ? convertToBitSet(cSet) : standardCharSet;\n\n        StringBuilder cleanSeq = new StringBuilder(sequence.length());\n        for (int i = 0; i < sequence.length(); i++) {\n            char c = sequence.charAt(i);\n            if (!charSet.get(c)) {\n                cleanSeq.append('-');\n            } else {\n                cleanSeq.append(c);\n            }\n        }\n        return cleanSeq.toString();\n    }\n\n    public static final String checkSequence(String sequence) {\n        return checkSequence(sequence, null);\n    }\n\n    public static final String checkSequence(String sequence, Set<Character> cSet) {\n        if (sequence == null) return null;\n        if (cSet == null) {\n            cSet = PeptideProperties.standardAASet;\n        }\n\n        if (doesSequenceContainInvalidChar(sequence, cSet)) {\n            return cleanSequence(sequence, cSet);\n        }\n        return sequence;\n    }\n}",
        0.984,
        0.997,
        0.9915817562518039,
        1.0009090220437846,
        0.9972370203160271,
        85
    ]
}