{
    "0": [
        "package jnt.scimark2;\n\nimport java.util.Random;\n\npublic class SparseCompRowOptimized {\n    // Sparse matrix-vector multiply using compressed row storage.\n    public static void matmult(double[] y, double[] val, int[] row,\n                               int[] col, double[] x, long NUM_ITERATIONS) {\n        int M = row.length - 1;\n        for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n            for (int r = 0; r < M; r++) {\n                double sum = 0.0;\n                int rowStart = row[r];\n                int rowEnd = row[r + 1];\n                for (int i = rowStart; i < rowEnd; i++) {\n                    sum += x[col[i]] * val[i];\n                }\n                y[r] = sum;\n            }\n        }\n    }\n\n    // Helper method to generate a random vector.\n    private static double[] randomVector(int N, Random R) {\n        double[] A = new double[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = R.nextDouble();\n        }\n        return A;\n    }\n\n    // Computes the sum of absolute differences between two vectors.\n    private static double normabs(double[] a, double[] b) {\n        double sum = 0.0;\n        for (int i = 0; i < a.length; i++) {\n            sum += Math.abs(a[i] - b[i]);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        // Parameters for the test.\n        int N = 1000;              // Size of the vector / number of rows.\n        int nz = 10000;            // Total number of nonzeros in the matrix.\n        long cycles = 524288;      // Fixed cycles\n        double regressionThreshold = 1.0e-10;\n        long seed = 101010;        \n\n        // Create random number generators.\n        Random rand1 = new Random(seed);\n        Random rand2 = new Random(seed + 1);\n\n        // Generate vector x.\n        double[] x = randomVector(N, rand1);\n\n        // Build the sparse matrix in compressed row format.\n        int nr = nz / N;       // Average nonzeros per row.\n        int anz = nr * N;      // Actual number of nonzeros.\n        double[] val = randomVector(anz, rand2);\n        int[] col = new int[anz];\n        int[] row = new int[N + 1];\n        row[0] = 0;\n        for (int r = 0; r < N; r++) {\n            int rowr = row[r];\n            row[r + 1] = rowr + nr;\n            int step = r / nr;\n            if (step < 1) step = 1;\n            for (int i = 0; i < nr; i++) {\n                col[rowr + i] = i * step;\n            }\n        }\n\n        // Prepare output arrays.\n        double[] yTest = new double[N];\n        double[] yRef = new double[N];\n\n        // Run the multiplication with a fixed number of cycles (simulate optimized run).\n        matmult(yTest, val, row, col, x, cycles);\n\n        // Run the multiplication with 1 iteration (reference run).\n        matmult(yRef, val, row, col, x, 1);\n\n        // Compare the two results.\n        double difference = normabs(yTest, yRef);\n\n        System.out.println(difference);\n    }\n}\n",
        240.295,
        4.269,
        19333818818.2,
        45305.6,
        0.234,
        2205.67,
        88
    ],
    "1": [
        "package jnt.scimark2;\n\nimport java.util.Random;\n\npublic class SparseCompRowOptimized {\n    \n    public static void matmult(double[] y, double[] val, int[] row,\n                               int[] col, double[] x, long NUM_ITERATIONS) {\n        int M = row.length - 1;\n        for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n            for (int r = 0; r < M; r++) {\n                double sum1 = 0.0, sum2 = 0.0, sum3 = 0.0, sum4 = 0.0;\n                int rowStart = row[r];\n                int rowEnd = row[r + 1];\n                int i;\n                \n                for (i = rowStart; i <= rowEnd - 4; i += 4) {\n                    sum1 += x[col[i]] * val[i];\n                    sum2 += x[col[i+1]] * val[i+1];\n                    sum3 += x[col[i+2]] * val[i+2];\n                    sum4 += x[col[i+3]] * val[i+3];\n                }\n                \n                for (; i < rowEnd; i++) {\n                    sum1 += x[col[i]] * val[i];\n                }\n                y[r] = sum1 + sum2 + sum3 + sum4;\n            }\n        }\n    }\n\n    \n    private static double[] randomVector(int N, Random R) {\n        double[] A = new double[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = R.nextDouble();\n        }\n        return A;\n    }\n\n    \n    private static double normabs(double[] a, double[] b) {\n        double sum = 0.0;\n        for (int i = 0; i < a.length; i++) {\n            sum += Math.abs(a[i] - b[i]);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        \n        int N = 1000;              \n        int nz = 10000;            \n        long cycles = 524288;      \n        double regressionThreshold = 1.0e-10;\n        long seed = 101010;        \n\n        \n        Random rand1 = new Random(seed);\n        Random rand2 = new Random(seed + 1);\n\n        \n        double[] x = randomVector(N, rand1);\n\n        \n        int nr = nz / N;       \n        int anz = nr * N;      \n        double[] val = randomVector(anz, rand2);\n        int[] col = new int[anz];\n        int[] row = new int[N + 1];\n        row[0] = 0;\n        for (int r = 0; r < N; r++) {\n            int rowr = row[r];\n            row[r + 1] = rowr + nr;\n            int step = r / nr;\n            if (step < 1) step = 1;\n            \n            for (int i = 0; i < nr; i++) {\n                col[rowr + i] = (i * step) % N; \n            }\n        }\n\n        \n        double[] yTest = new double[N];\n        double[] yRef = new double[N];\n\n        \n        matmult(yTest, val, row, col, x, cycles);\n\n        \n        matmult(yRef, val, row, col, x, 1);\n\n        \n        double difference = normabs(yTest, yRef);\n\n        System.out.println(difference);\n    }\n}",
        0.735,
        0.729,
        0.7206848567280657,
        0.99384026815015,
        0.7294957264957265,
        0.6634129312181786,
        98
    ],
    "2": [
        "package jnt.scimark2;\n\nimport java.util.Random;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.stream.IntStream;\n\npublic class SparseCompRowOptimized {\n    \n    public static void parallelMatmult(double[] y, double[] val, int[] row,\n                                       int[] col, double[] x, long NUM_ITERATIONS) {\n        int M = row.length - 1;\n        ForkJoinPool pool = new ForkJoinPool();\n        pool.submit(() -> IntStream.range(0, M).parallel().forEach(r -> {\n            double[] localY = new double[y.length]; \n            for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n                double sum1 = 0.0, sum2 = 0.0, sum3 = 0.0, sum4 = 0.0;\n                int rowStart = row[r];\n                int rowEnd = row[r + 1];\n                int i;\n                for (i = rowStart; i <= rowEnd - 4; i += 4) {\n                    sum1 += x[col[i]] * val[i];\n                    sum2 += x[col[i+1]] * val[i+1];\n                    sum3 += x[col[i+2]] * val[i+2];\n                    sum4 += x[col[i+3]] * val[i+3];\n                }\n                for (; i < rowEnd; i++) {\n                    sum1 += x[col[i]] * val[i];\n                }\n                localY[r] = sum1 + sum2 + sum3 + sum4;\n            }\n            y[r] = localY[r];\n        })).join();\n    }\n\n    private static double[] randomVector(int N, Random R) {\n        double[] A = new double[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = R.nextDouble();\n        }\n        return A;\n    }\n\n    private static double normabs(double[] a, double[] b) {\n        double sum = 0.0;\n        for (int i = 0; i < a.length; i++) {\n            sum += Math.abs(a[i] - b[i]);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int N = 1000;\n        int nz = 10000;\n        long cycles = 524288;\n        double regressionThreshold = 1.0e-10;\n        long seed = 101010;\n\n        Random rand1 = new Random(seed);\n        Random rand2 = new Random(seed + 1);\n\n        double[] x = randomVector(N, rand1);\n\n        int nr = nz / N;\n        int anz = nr * N;\n        double[] val = randomVector(anz, rand2);\n        int[] col = new int[anz];\n        int[] row = new int[N + 1];\n        row[0] = 0;\n        for (int r = 0; r < N; r++) {\n            int rowr = row[r];\n            row[r + 1] = rowr + nr;\n            int step = r / nr;\n            if (step < 1) step = 1;\n            for (int i = 0; i < nr; i++) {\n                col[rowr + i] = (i * step) % N;\n            }\n        }\n\n        double[] yTest = new double[N];\n        double[] yRef = new double[N];\n\n        parallelMatmult(yTest, val, row, col, x, cycles);\n        matmult(yRef, val, row, col, x, 1);\n\n        double difference = normabs(yTest, yRef);\n\n        System.out.println(difference);\n    }\n\n    \n    public static void matmult(double[] y, double[] val, int[] row,\n                               int[] col, double[] x, long NUM_ITERATIONS) {\n        int M = row.length - 1;\n        for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n            for (int r = 0; r < M; r++) {\n                double sum1 = 0.0, sum2 = 0.0, sum3 = 0.0, sum4 = 0.0;\n                int rowStart = row[r];\n                int rowEnd = row[r + 1];\n                int i;\n                for (i = rowStart; i <= rowEnd - 4; i += 4) {\n                    sum1 += x[col[i]] * val[i];\n                    sum2 += x[col[i+1]] * val[i+1];\n                    sum3 += x[col[i+2]] * val[i+2];\n                    sum4 += x[col[i+3]] * val[i+3];\n                }\n                for (; i < rowEnd; i++) {\n                    sum1 += x[col[i]] * val[i];\n                }\n                y[r] = sum1 + sum2 + sum3 + sum4;\n            }\n        }\n    }\n}",
        2.622,
        5.939,
        0.3012979528886762,
        0.7621970094615146,
        5.944119658119658,
        0.6595456255922236,
        113
    ]
}