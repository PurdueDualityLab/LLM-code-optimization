{
    "0": [
        "// Sparse matrix-vector multiply using compressed row storage.\npublic static void matmult(double[] y, double[] val, int[] row, int[] col, double[] x, long NUM_ITERATIONS) {\n    int M = row.length - 1;\n    for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n        for (int r = 0; r < M; r++) {\n            double sum = 0.0;\n            int rowStart = row[r];\n            int rowEnd = row[r + 1];\n            for (int i = rowStart; i < rowEnd; i++) {\n                sum += x[col[i]] * val[i];\n            }\n            y[r] = sum;\n        }\n    }\n}",
        250.305,
        4.46,
        20107394718.6,
        45323.2,
        0.224,
        2178.18,
        15
    ],
    "1": [
        "package jnt.scimark2;\n\npublic static void matmult(double[] y, double[] val, int[] row, int[] col, double[] x, long NUM_ITERATIONS) {\n    int M = row.length - 1;\n    for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n        for (int r = 0; r < M; r++) {\n            double sum1 = 0.0, sum2 = 0.0, sum3 = 0.0, sum4 = 0.0;\n            int rowStart = row[r];\n            int rowEnd = row[r + 1];\n            int i;\n            for (i = rowStart; i <= rowEnd - 4; i += 4) {\n                sum1 += x[col[i]] * val[i];\n                sum2 += x[col[i + 1]] * val[i + 1];\n                sum3 += x[col[i + 2]] * val[i + 2];\n                sum4 += x[col[i + 3]] * val[i + 3];\n            }\n            double sum = sum1 + sum2 + sum3 + sum4;\n            \n            for (; i < rowEnd; i++) {\n                sum += x[col[i]] * val[i];\n            }\n            y[r] = sum;\n        }\n    }\n}",
        0.855,
        0.85,
        0.8418753336032632,
        0.9933895600638248,
        0.8508080357142856,
        0.6667584864428101,
        25
    ]
}