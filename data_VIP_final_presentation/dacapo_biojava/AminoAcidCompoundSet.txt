{
    "0": [
        "\n\npackage org.biojava.nbio.core.sequence.compound;\n\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.io.Serializable;\nimport java.util.*;\n\n\npublic class AminoAcidCompoundSet implements CompoundSet<AminoAcidCompound>, Serializable {\n\n\t\n\tprivate static final long serialVersionUID = 4000344194364133456L;\n\tprivate final Map<String, AminoAcidCompound> aminoAcidCompoundCache = new HashMap<String, AminoAcidCompound>();\n\tprivate final Map<String, AminoAcidCompound> aminoAcidCompoundCache3Letter = new HashMap<String, AminoAcidCompound>();\n\n\tprivate final Map<AminoAcidCompound, Set<AminoAcidCompound>> equivalentsCache =\n\t\t\tnew HashMap<AminoAcidCompound, Set<AminoAcidCompound>>();\n\n\tpublic AminoAcidCompoundSet() {\n\t\taminoAcidCompoundCache.put(\"A\", new AminoAcidCompound(this, \"A\", \"Ala\", \"Alanine\", 71.0788f));\n\t\taminoAcidCompoundCache.put(\"R\", new AminoAcidCompound(this, \"R\", \"Arg\", \"Arginine\", 156.1875f));\n\t\taminoAcidCompoundCache.put(\"N\", new AminoAcidCompound(this, \"N\", \"Asn\", \"Asparagine\", 114.1039f));\n\t\taminoAcidCompoundCache.put(\"D\", new AminoAcidCompound(this, \"D\", \"Asp\", \"Aspartic acid\", 115.0886f));\n\t\taminoAcidCompoundCache.put(\"C\", new AminoAcidCompound(this, \"C\", \"Cys\", \"Cysteine\", 103.1388f));\n\t\taminoAcidCompoundCache.put(\"E\", new AminoAcidCompound(this, \"E\", \"Glu\", \"Glutamic acid\", 129.1155f));\n\t\taminoAcidCompoundCache.put(\"Q\", new AminoAcidCompound(this, \"Q\", \"Gln\", \"Glutamine\", 128.1307f));\n\t\taminoAcidCompoundCache.put(\"G\", new AminoAcidCompound(this, \"G\", \"Gly\", \"Glycine\", 57.0519f));\n\t\taminoAcidCompoundCache.put(\"H\", new AminoAcidCompound(this, \"H\", \"His\", \"Histidine\", 137.1411f));\n\t\taminoAcidCompoundCache.put(\"I\", new AminoAcidCompound(this, \"I\", \"Ile\", \"Isoleucine\", 113.1594f));\n\t\taminoAcidCompoundCache.put(\"L\", new AminoAcidCompound(this, \"L\", \"Leu\", \"Leucine\", 113.1594f));\n\t\taminoAcidCompoundCache.put(\"K\", new AminoAcidCompound(this, \"K\", \"Lys\", \"Lysine\", 128.1741f));\n\t\taminoAcidCompoundCache.put(\"M\", new AminoAcidCompound(this, \"M\", \"Met\", \"Methionine\", 131.1986f));\n\t\taminoAcidCompoundCache.put(\"F\", new AminoAcidCompound(this, \"F\", \"Phe\", \"Phenylalanine\", 147.1766f));\n\t\taminoAcidCompoundCache.put(\"P\", new AminoAcidCompound(this, \"P\", \"Pro\", \"Proline\", 97.1167f));\n\t\taminoAcidCompoundCache.put(\"S\", new AminoAcidCompound(this, \"S\", \"Ser\", \"Serine\", 87.0782f));\n\t\taminoAcidCompoundCache.put(\"T\", new AminoAcidCompound(this, \"T\", \"Thr\", \"Threonine\", 101.1051f));\n\t\taminoAcidCompoundCache.put(\"W\", new AminoAcidCompound(this, \"W\", \"Trp\", \"Tryptophan\", 186.2132f));\n\t\taminoAcidCompoundCache.put(\"Y\", new AminoAcidCompound(this, \"Y\", \"Tyr\", \"Tyrosine\", 163.1760f));\n\t\taminoAcidCompoundCache.put(\"V\", new AminoAcidCompound(this, \"V\", \"Val\", \"Valine\", 99.1326f));\n\t\taminoAcidCompoundCache.put(\"B\", new AminoAcidCompound(this, \"B\", \"Asx\", \"Asparagine or Aspartic acid\", null));\n\t\taminoAcidCompoundCache.put(\"Z\", new AminoAcidCompound(this, \"Z\", \"Glx\", \"Glutamine or Glutamic acid\", null));\n\t\taminoAcidCompoundCache.put(\"J\", new AminoAcidCompound(this, \"J\", \"Xle\", \"Leucine or Isoleucine\", null));\n\t\taminoAcidCompoundCache.put(\"X\", new AminoAcidCompound(this, \"X\", \"Xaa\", \"Unspecified\", null));\n\t\taminoAcidCompoundCache.put(\"-\", new AminoAcidCompound(this, \"-\", \"---\", \"Unspecified\", null));\n\t\taminoAcidCompoundCache.put(\".\", new AminoAcidCompound(this, \".\", \"...\", \"Unspecified\", null));\n\t\taminoAcidCompoundCache.put(\"_\", new AminoAcidCompound(this, \"_\", \"___\", \"Unspecified\", null));\n\t\taminoAcidCompoundCache.put(\"*\", new AminoAcidCompound(this, \"*\", \"***\", \"Stop\", null));\n\n\t\t\n\t\t\n\t\t\n\t\taminoAcidCompoundCache.put(\"U\", new AminoAcidCompound(this, \"U\", \"Sec\", \"Selenocysteine\", 150.0388f));\n\n\t\t\n\t\t\n\t\t\n\t\taminoAcidCompoundCache.put(\"O\", new AminoAcidCompound(this, \"O\", \"Pyl\", \"Pyrrolysine\", 255.3172f));\n\n\t\tfor(String oneLtr : aminoAcidCompoundCache.keySet()) {\n\t\t\tAminoAcidCompound aa = aminoAcidCompoundCache.get(oneLtr);\n\t\t\tString threeLtr = aa.getLongName().toUpperCase();\n\t\t\taminoAcidCompoundCache3Letter.put(threeLtr, aa);\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getStringForCompound(AminoAcidCompound compound) {\n\t\treturn compound.toString();\n\t}\n\n\t@Override\n\tpublic AminoAcidCompound getCompoundForString(String string) {\n\t\tif (string.length() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (string.length() == 3) {\n\t\t\treturn this.aminoAcidCompoundCache3Letter.get(string.toUpperCase());\n\t\t}\n\t\tif (string.length() > this.getMaxSingleCompoundStringLength()) {\n\t\t\tthrow new IllegalArgumentException(\"String supplied (\"+string+\") is too long. Max is \"+getMaxSingleCompoundStringLength());\n\t\t}\n\t\treturn this.aminoAcidCompoundCache.get(string.toUpperCase());\n\t}\n\n\t@Override\n\tpublic int getMaxSingleCompoundStringLength() {\n\t\treturn 1;\n\t}\n\n\n\t@Override\n\tpublic boolean isCompoundStringLengthEqual() {\n\t\treturn true;\n\t}\n\n\tprivate final static AminoAcidCompoundSet aminoAcidCompoundSet = new AminoAcidCompoundSet();\n\n\tpublic static AminoAcidCompoundSet getAminoAcidCompoundSet() {\n\t\treturn aminoAcidCompoundSet;\n\t}\n\n\t@Override\n\tpublic boolean compoundsEquivalent(AminoAcidCompound compoundOne, AminoAcidCompound compoundTwo) {\n\t\tSet<AminoAcidCompound> equivalents = getEquivalentCompounds(compoundOne);\n\t\treturn (equivalents != null) && equivalents.contains(compoundTwo);\n\t}\n\n\t@Override\n\tpublic Set<AminoAcidCompound> getEquivalentCompounds(AminoAcidCompound compound) {\n\t\tif (equivalentsCache.isEmpty()) {\n\t\t\t\n\t\t\tfor (AminoAcidCompound c : aminoAcidCompoundCache.values()) {\n\t\t\t\tequivalentsCache.put(c, Collections.singleton(c));\n\t\t\t}\n\t\t\t\n\t\t\taddAmbiguousEquivalents(\"N\", \"D\", \"B\");\n\t\t\t\n\t\t\taddAmbiguousEquivalents(\"E\", \"Q\", \"Z\");\n\t\t\t\n\t\t\taddAmbiguousEquivalents(\"I\", \"L\", \"J\");\n\t\t\t\n\t\t\tAminoAcidCompound gap1, gap2, gap3;\n\t\t\tSet<AminoAcidCompound> gaps = new HashSet<AminoAcidCompound>();\n\t\t\tgaps.add(gap1 = aminoAcidCompoundCache.get(\"-\"));\n\t\t\tgaps.add(gap2 = aminoAcidCompoundCache.get(\".\"));\n\t\t\tgaps.add(gap3 = aminoAcidCompoundCache.get(\"_\"));\n\t\t\tequivalentsCache.put(gap1, gaps);\n\t\t\tequivalentsCache.put(gap2, gaps);\n\t\t\tequivalentsCache.put(gap3, gaps);\n\t\t\t\n\t\t\tequivalentsCache.put(aminoAcidCompoundCache.get(\"X\"), new HashSet<AminoAcidCompound>());\n\t\t}\n\t\treturn equivalentsCache.get(compound);\n\t}\n\n\t\n\tprivate void addAmbiguousEquivalents(String one, String two, String either) {\n\t\tSet<AminoAcidCompound> equivalents;\n\t\tAminoAcidCompound cOne, cTwo, cEither;\n\n\t\tequivalents = new HashSet<AminoAcidCompound>();\n\t\tequivalents.add(cOne = aminoAcidCompoundCache.get(one));\n\t\tequivalents.add(cTwo = aminoAcidCompoundCache.get(two));\n\t\tequivalents.add(cEither = aminoAcidCompoundCache.get(either));\n\t\tequivalentsCache.put(cEither, equivalents);\n\n\t\tequivalents = new HashSet<AminoAcidCompound>();\n\t\tequivalents.add(cOne);\n\t\tequivalents.add(cEither);\n\t\tequivalentsCache.put(cOne, equivalents);\n\n\t\tequivalents = new HashSet<AminoAcidCompound>();\n\t\tequivalents.add(cTwo);\n\t\tequivalents.add(cEither);\n\t\tequivalentsCache.put(cTwo, equivalents);\n\t}\n\n\t@Override\n\tpublic boolean hasCompound(AminoAcidCompound compound) {\n\t\treturn aminoAcidCompoundCache.containsValue(compound);\n\t}\n\n\t@Override\n\tpublic boolean isValidSequence(Sequence<AminoAcidCompound> sequence) {\n\t\tfor (AminoAcidCompound compound: sequence) {\n\t\t\tif (!hasCompound(compound)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic List<AminoAcidCompound> getAllCompounds() {\n\t\treturn new ArrayList<AminoAcidCompound>(aminoAcidCompoundCache.values());\n\t}\n\n\n\t@Override\n\tpublic boolean isComplementable() {\n\t\treturn false;\n\t}\n}\n",
        136.741,
        2.18,
        6539185768.0,
        5946.4,
        0.459,
        186
    ],
    "1": [
        "package org.biojava.nbio.core.sequence.compound;\n\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.io.Serializable;\nimport java.util.*;\n\npublic class AminoAcidCompoundSet implements CompoundSet<AminoAcidCompound>, Serializable {\n\n    private static final long serialVersionUID = 4000344194364133456L;\n    private final Map<String, AminoAcidCompound> aminoAcidCompoundCache = new HashMap<>();\n    private final Map<String, AminoAcidCompound> aminoAcidCompoundCache3Letter = new HashMap<>();\n    private final Map<AminoAcidCompound, Set<AminoAcidCompound>> equivalentsCache = new HashMap<>();\n\n    public AminoAcidCompoundSet() {\n        populateCache();\n        initializeThreeLetterCache();\n    }\n\n    private void populateCache() {\n        aminoAcidCompoundCache.put(\"A\", new AminoAcidCompound(this, \"A\", \"Ala\", \"Alanine\", 71.0788f));\n        aminoAcidCompoundCache.put(\"R\", new AminoAcidCompound(this, \"R\", \"Arg\", \"Arginine\", 156.1875f));\n        aminoAcidCompoundCache.put(\"N\", new AminoAcidCompound(this, \"N\", \"Asn\", \"Asparagine\", 114.1039f));\n        aminoAcidCompoundCache.put(\"D\", new AminoAcidCompound(this, \"D\", \"Asp\", \"Aspartic acid\", 115.0886f));\n        aminoAcidCompoundCache.put(\"C\", new AminoAcidCompound(this, \"C\", \"Cys\", \"Cysteine\", 103.1388f));\n        aminoAcidCompoundCache.put(\"E\", new AminoAcidCompound(this, \"E\", \"Glu\", \"Glutamic acid\", 129.1155f));\n        aminoAcidCompoundCache.put(\"Q\", new AminoAcidCompound(this, \"Q\", \"Gln\", \"Glutamine\", 128.1307f));\n        aminoAcidCompoundCache.put(\"G\", new AminoAcidCompound(this, \"G\", \"Gly\", \"Glycine\", 57.0519f));\n        aminoAcidCompoundCache.put(\"H\", new AminoAcidCompound(this, \"H\", \"His\", \"Histidine\", 137.1411f));\n        aminoAcidCompoundCache.put(\"I\", new AminoAcidCompound(this, \"I\", \"Ile\", \"Isoleucine\", 113.1594f));\n        aminoAcidCompoundCache.put(\"L\", new AminoAcidCompound(this, \"L\", \"Leu\", \"Leucine\", 113.1594f));\n        aminoAcidCompoundCache.put(\"K\", new AminoAcidCompound(this, \"K\", \"Lys\", \"Lysine\", 128.1741f));\n        aminoAcidCompoundCache.put(\"M\", new AminoAcidCompound(this, \"M\", \"Met\", \"Methionine\", 131.1986f));\n        aminoAcidCompoundCache.put(\"F\", new AminoAcidCompound(this, \"F\", \"Phe\", \"Phenylalanine\", 147.1766f));\n        aminoAcidCompoundCache.put(\"P\", new AminoAcidCompound(this, \"P\", \"Pro\", \"Proline\", 97.1167f));\n        aminoAcidCompoundCache.put(\"S\", new AminoAcidCompound(this, \"S\", \"Ser\", \"Serine\", 87.0782f));\n        aminoAcidCompoundCache.put(\"T\", new AminoAcidCompound(this, \"T\", \"Thr\", \"Threonine\", 101.1051f));\n        aminoAcidCompoundCache.put(\"W\", new AminoAcidCompound(this, \"W\", \"Trp\", \"Tryptophan\", 186.2132f));\n        aminoAcidCompoundCache.put(\"Y\", new AminoAcidCompound(this, \"Y\", \"Tyr\", \"Tyrosine\", 163.1760f));\n        aminoAcidCompoundCache.put(\"V\", new AminoAcidCompound(this, \"V\", \"Val\", \"Valine\", 99.1326f));\n        aminoAcidCompoundCache.put(\"B\", new AminoAcidCompound(this, \"B\", \"Asx\", \"Asparagine or Aspartic acid\", null));\n        aminoAcidCompoundCache.put(\"Z\", new AminoAcidCompound(this, \"Z\", \"Glx\", \"Glutamine or Glutamic acid\", null));\n        aminoAcidCompoundCache.put(\"J\", new AminoAcidCompound(this, \"J\", \"Xle\", \"Leucine or Isoleucine\", null));\n        aminoAcidCompoundCache.put(\"X\", new AminoAcidCompound(this, \"X\", \"Xaa\", \"Unspecified\", null));\n        aminoAcidCompoundCache.put(\"-\", new AminoAcidCompound(this, \"-\", \"---\", \"Unspecified\", null));\n        aminoAcidCompoundCache.put(\".\", new AminoAcidCompound(this, \".\", \"...\", \"Unspecified\", null));\n        aminoAcidCompoundCache.put(\"_\", new AminoAcidCompound(this, \"_\", \"___\", \"Unspecified\", null));\n        aminoAcidCompoundCache.put(\"*\", new AminoAcidCompound(this, \"*\", \"***\",\"Stop\",null));\n        aminoAcidCompoundCache.put(\"U\", new AminoAcidCompound(this, \"U\", \"Sec\", \"Selenocysteine\", 150.0388f));\n        aminoAcidCompoundCache.put(\"O\", new AminoAcidCompound(this, \"O\", \"Pyl\", \"Pyrrolysine\", 255.3172f));\n    }\n\n    private void initializeThreeLetterCache() {\n        for (Map.Entry<String, AminoAcidCompound> entry : aminoAcidCompoundCache.entrySet()) {\n            AminoAcidCompound aa = entry.getValue();\n            aminoAcidCompoundCache3Letter.put(aa.getLongName().toUpperCase(), aa);\n        }\n    }\n\n    @Override\n    public String getStringForCompound(AminoAcidCompound compound) {\n        return compound.toString();\n    }\n\n    @Override\n    public AminoAcidCompound getCompoundForString(String string) {\n        if (string.length() == 0) {\n            return null;\n        }\n        if (string.length() == 3) {\n            return this.aminoAcidCompoundCache3Letter.get(string.toUpperCase());\n        }\n        if (string.length() > this.getMaxSingleCompoundStringLength()) {\n            throw new IllegalArgumentException(\"String supplied (\" + string + \") is too long. Max is \" + getMaxSingleCompoundStringLength());\n        }\n        return this.aminoAcidCompoundCache.get(string.toUpperCase());\n    }\n\n    @Override\n    public int getMaxSingleCompoundStringLength() {\n        return 1;\n    }\n\n    @Override\n    public boolean isCompoundStringLengthEqual() {\n        return true;\n    }\n\n    private static final AminoAcidCompoundSet aminoAcidCompoundSet = new AminoAcidCompoundSet();\n\n    public static AminoAcidCompoundSet getAminoAcidCompoundSet() {\n        return aminoAcidCompoundSet;\n    }\n\n    @Override\n    public boolean compoundsEquivalent(AminoAcidCompound compoundOne, AminoAcidCompound compoundTwo) {\n        Set<AminoAcidCompound> equivalents = getEquivalentCompounds(compoundOne);\n        return (equivalents != null) && equivalents.contains(compoundTwo);\n    }\n\n    @Override\n    public Set<AminoAcidCompound> getEquivalentCompounds(AminoAcidCompound compound) {\n        initializeEquivalentsCache();\n        return equivalentsCache.get(compound);\n    }\n\n    private synchronized void initializeEquivalentsCache() {\n        if (equivalentsCache.isEmpty()) {\n            for (AminoAcidCompound c : aminoAcidCompoundCache.values()) {\n                equivalentsCache.put(c, Collections.singleton(c));\n            }\n            addAmbiguousEquivalents(\"N\", \"D\", \"B\");\n            addAmbiguousEquivalents(\"E\", \"Q\", \"Z\");\n            addAmbiguousEquivalents(\"I\", \"L\", \"J\");\n            setUpGapEquivalence();\n        }\n    }\n\n    private void addAmbiguousEquivalents(String one, String two, String either) {\n        Set<AminoAcidCompound> equivalents;\n        AminoAcidCompound cOne = aminoAcidCompoundCache.get(one);\n        AminoAcidCompound cTwo = aminoAcidCompoundCache.get(two);\n        AminoAcidCompound cEither = aminoAcidCompoundCache.get(either);\n        equivalents = new HashSet<>(Arrays.asList(cOne, cTwo, cEither));\n        equivalentsCache.put(cEither, equivalents);\n        equivalents = new HashSet<>(Arrays.asList(cOne, cEither));\n        equivalentsCache.put(cOne, equivalents);\n        equivalents = new HashSet<>(Arrays.asList(cTwo, cEither));\n        equivalentsCache.put(cTwo, equivalents);\n    }\n\n    private void setUpGapEquivalence() {\n        AminoAcidCompound gap1 = aminoAcidCompoundCache.get(\"-\");\n        AminoAcidCompound gap2 = aminoAcidCompoundCache.get(\".\");\n        AminoAcidCompound gap3 = aminoAcidCompoundCache.get(\"_\");\n        Set<AminoAcidCompound> gaps = new HashSet<>(Arrays.asList(gap1, gap2, gap3));\n        equivalentsCache.put(gap1, gaps);\n        equivalentsCache.put(gap2, gaps);\n        equivalentsCache.put(gap3, gaps);\n    }\n\n    @Override\n    public boolean hasCompound(AminoAcidCompound compound) {\n        return aminoAcidCompoundCache.containsValue(compound);\n    }\n\n    @Override\n    public boolean isValidSequence(Sequence<AminoAcidCompound> sequence) {\n        for (AminoAcidCompound compound : sequence) {\n            if (!hasCompound(compound)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    @Override\n    public List<AminoAcidCompound> getAllCompounds() {\n        return new ArrayList<>(aminoAcidCompoundCache.values());\n    }\n\n    @Override\n    public boolean isComplementable() {\n        return false;\n    }\n}\n",
        1.01,
        1.0,
        1.000334357285471,
        0.9974503488996241,
        0.999797385620915,
        167
    ],
    "2": [
        "package org.biojava.nbio.core.sequence.compound;\n\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class AminoAcidCompoundSet implements CompoundSet<AminoAcidCompound>, Serializable {\n\n    private static final long serialVersionUID = 4000344194364133456L;\n    private final Map<String, AminoAcidCompound> aminoAcidCompoundCache = new HashMap<>();\n    private final Map<String, AminoAcidCompound> aminoAcidCompoundCache3Letter = new HashMap<>();\n    private final Map<AminoAcidCompound, Set<AminoAcidCompound>> equivalentsCache = new ConcurrentHashMap<>();\n    private volatile boolean cacheInitialized = false;\n\n    public AminoAcidCompoundSet() {\n        populateCache();\n        initializeThreeLetterCache();\n    }\n\n    private void populateCache() {\n        aminoAcidCompoundCache.put(\"A\", new AminoAcidCompound(this, \"A\", \"Ala\", \"Alanine\", 71.0788f));\n        aminoAcidCompoundCache.put(\"R\", new AminoAcidCompound(this, \"R\", \"Arg\", \"Arginine\", 156.1875f));\n        aminoAcidCompoundCache.put(\"N\", new AminoAcidCompound(this, \"N\", \"Asn\", \"Asparagine\", 114.1039f));\n        aminoAcidCompoundCache.put(\"D\", new AminoAcidCompound(this, \"D\", \"Asp\", \"Aspartic acid\", 115.0886f));\n        aminoAcidCompoundCache.put(\"C\", new AminoAcidCompound(this, \"C\", \"Cys\", \"Cysteine\", 103.1388f));\n        aminoAcidCompoundCache.put(\"E\", new AminoAcidCompound(this, \"E\", \"Glu\", \"Glutamic acid\", 129.1155f));\n        aminoAcidCompoundCache.put(\"Q\", new AminoAcidCompound(this, \"Q\", \"Gln\", \"Glutamine\", 128.1307f));\n        aminoAcidCompoundCache.put(\"G\", new AminoAcidCompound(this, \"G\", \"Gly\", \"Glycine\", 57.0519f));\n        aminoAcidCompoundCache.put(\"H\", new AminoAcidCompound(this, \"H\", \"His\", \"Histidine\", 137.1411f));\n        aminoAcidCompoundCache.put(\"I\", new AminoAcidCompound(this, \"I\", \"Ile\", \"Isoleucine\", 113.1594f));\n        aminoAcidCompoundCache.put(\"L\", new AminoAcidCompound(this, \"L\", \"Leu\", \"Leucine\", 113.1594f));\n        aminoAcidCompoundCache.put(\"K\", new AminoAcidCompound(this, \"K\", \"Lys\", \"Lysine\", 128.1741f));\n        aminoAcidCompoundCache.put(\"M\", new AminoAcidCompound(this, \"M\", \"Met\", \"Methionine\", 131.1986f));\n        aminoAcidCompoundCache.put(\"F\", new AminoAcidCompound(this, \"F\", \"Phe\", \"Phenylalanine\", 147.1766f));\n        aminoAcidCompoundCache.put(\"P\", new AminoAcidCompound(this, \"P\", \"Pro\", \"Proline\", 97.1167f));\n        aminoAcidCompoundCache.put(\"S\", new AminoAcidCompound(this, \"S\", \"Ser\", \"Serine\", 87.0782f));\n        aminoAcidCompoundCache.put(\"T\", new AminoAcidCompound(this, \"T\", \"Thr\", \"Threonine\", 101.1051f));\n        aminoAcidCompoundCache.put(\"W\", new AminoAcidCompound(this, \"W\", \"Trp\", \"Tryptophan\", 186.2132f));\n        aminoAcidCompoundCache.put(\"Y\", new AminoAcidCompound(this, \"Y\", \"Tyr\", \"Tyrosine\", 163.1760f));\n        aminoAcidCompoundCache.put(\"V\", new AminoAcidCompound(this, \"V\", \"Val\", \"Valine\", 99.1326f));\n        aminoAcidCompoundCache.put(\"B\", new AminoAcidCompound(this, \"B\", \"Asx\", \"Asparagine or Aspartic acid\", null));\n        aminoAcidCompoundCache.put(\"Z\", new AminoAcidCompound(this, \"Z\", \"Glx\", \"Glutamine or Glutamic acid\", null));\n        aminoAcidCompoundCache.put(\"J\", new AminoAcidCompound(this, \"J\", \"Xle\", \"Leucine or Isoleucine\", null));\n        aminoAcidCompoundCache.put(\"X\", new AminoAcidCompound(this, \"X\", \"Xaa\", \"Unspecified\", null));\n        aminoAcidCompoundCache.put(\"-\", new AminoAcidCompound(this, \"-\", \"---\", \"Unspecified\", null));\n        aminoAcidCompoundCache.put(\".\", new AminoAcidCompound(this, \".\", \"...\", \"Unspecified\", null));\n        aminoAcidCompoundCache.put(\"_\", new AminoAcidCompound(this, \"_\", \"___\", \"Unspecified\", null));\n        aminoAcidCompoundCache.put(\"*\", new AminoAcidCompound(this, \"*\", \"***\",\"Stop\",null));\n        aminoAcidCompoundCache.put(\"U\", new AminoAcidCompound(this, \"U\", \"Sec\", \"Selenocysteine\", 150.0388f));\n        aminoAcidCompoundCache.put(\"O\", new AminoAcidCompound(this, \"O\", \"Pyl\", \"Pyrrolysine\", 255.3172f));\n    }\n\n    private void initializeThreeLetterCache() {\n        for (Map.Entry<String, AminoAcidCompound> entry : aminoAcidCompoundCache.entrySet()) {\n            AminoAcidCompound aa = entry.getValue();\n            aminoAcidCompoundCache3Letter.put(aa.getLongName().toUpperCase(), aa);\n        }\n    }\n\n    @Override\n    public String getStringForCompound(AminoAcidCompound compound) {\n        return compound.toString();\n    }\n\n    @Override\n    public AminoAcidCompound getCompoundForString(String string) {\n        if (string.length() == 0) {\n            return null;\n        }\n        if (string.length() == 3) {\n            return this.aminoAcidCompoundCache3Letter.get(string.toUpperCase());\n        }\n        if (string.length() > this.getMaxSingleCompoundStringLength()) {\n            throw new IllegalArgumentException(\"String supplied (\" + string + \") is too long. Max is \" + getMaxSingleCompoundStringLength());\n        }\n        return this.aminoAcidCompoundCache.get(string.toUpperCase());\n    }\n\n    @Override\n    public int getMaxSingleCompoundStringLength() {\n        return 1;\n    }\n\n    @Override\n    public boolean isCompoundStringLengthEqual() {\n        return true;\n    }\n\n    private static final AminoAcidCompoundSet aminoAcidCompoundSet = new AminoAcidCompoundSet();\n\n    public static AminoAcidCompoundSet getAminoAcidCompoundSet() {\n        return aminoAcidCompoundSet;\n    }\n\n    @Override\n    public boolean compoundsEquivalent(AminoAcidCompound compoundOne, AminoAcidCompound compoundTwo) {\n        Set<AminoAcidCompound> equivalents = getEquivalentCompounds(compoundOne);\n        return (equivalents != null) && equivalents.contains(compoundTwo);\n    }\n\n    @Override\n    public Set<AminoAcidCompound> getEquivalentCompounds(AminoAcidCompound compound) {\n        if (!cacheInitialized) {\n            synchronized (this) {\n                if (!cacheInitialized) {\n                    initializeEquivalentsCache();\n                    cacheInitialized = true;\n                }\n            }\n        }\n        return equivalentsCache.get(compound);\n    }\n\n    private void initializeEquivalentsCache() {\n        for (AminoAcidCompound c : aminoAcidCompoundCache.values()) {\n            equivalentsCache.put(c, Collections.singleton(c));\n        }\n        addAmbiguousEquivalents(\"N\", \"D\", \"B\");\n        addAmbiguousEquivalents(\"E\", \"Q\", \"Z\");\n        addAmbiguousEquivalents(\"I\", \"L\", \"J\");\n        setUpGapEquivalence();\n    }\n\n    private void addAmbiguousEquivalents(String one, String two, String either) {\n        AminoAcidCompound cOne = aminoAcidCompoundCache.get(one);\n        AminoAcidCompound cTwo = aminoAcidCompoundCache.get(two);\n        AminoAcidCompound cEither = aminoAcidCompoundCache.get(either);\n        Set<AminoAcidCompound> equivalents = new HashSet<>(Arrays.asList(cOne, cTwo, cEither));\n        equivalentsCache.put(cEither, equivalents);\n        equivalentsCache.put(cOne, new HashSet<>(Arrays.asList(cOne, cEither)));\n        equivalentsCache.put(cTwo, new HashSet<>(Arrays.asList(cTwo, cEither)));\n    }\n\n    private void setUpGapEquivalence() {\n        AminoAcidCompound gap1 = aminoAcidCompoundCache.get(\"-\");\n        AminoAcidCompound gap2 = aminoAcidCompoundCache.get(\".\");\n        AminoAcidCompound gap3 = aminoAcidCompoundCache.get(\"_\");\n        Set<AminoAcidCompound> gaps = new HashSet<>(Arrays.asList(gap1, gap2, gap3));\n        equivalentsCache.put(gap1, gaps);\n        equivalentsCache.put(gap2, gaps);\n        equivalentsCache.put(gap3, gaps);\n    }\n\n    @Override\n    public boolean hasCompound(AminoAcidCompound compound) {\n        return aminoAcidCompoundCache.containsValue(compound);\n    }\n\n    @Override\n    public boolean isValidSequence(Sequence<AminoAcidCompound> sequence) {\n        for (AminoAcidCompound compound : sequence) {\n            if (!hasCompound(compound)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    @Override\n    public List<AminoAcidCompound> getAllCompounds() {\n        return new ArrayList<>(aminoAcidCompoundCache.values());\n    }\n\n    @Override\n    public boolean isComplementable() {\n        return false;\n    }\n}\n",
        0.99,
        0.982,
        0.9819487421464425,
        0.9900106553010123,
        0.9814204793028322,
        171
    ]
}