{
    "0": [
        "// Sparse matrix-vector multiply using compressed row storage.\npublic static void matmult(double[] y, double[] val, int[] row, int[] col, double[] x, long NUM_ITERATIONS) {\n    int M = row.length - 1;\n    for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n        for (int r = 0; r < M; r++) {\n            double sum = 0.0;\n            int rowStart = row[r];\n            int rowEnd = row[r + 1];\n            for (int i = rowStart; i < rowEnd; i++) {\n                sum += x[col[i]] * val[i];\n            }\n            y[r] = sum;\n        }\n    }\n}",
        247.204,
        4.357,
        13069718297.4,
        45100.8,
        0.23,
        2174.57,
        15
    ],
    "1": [
        "package jnt.scimark2;\npublic static void matmult(double[] y, double[] val, int[] row, int[] col, double[] x, long NUM_ITERATIONS) {\n    int M = row.length - 1;\n\n    \n    for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n        for (int r = 0; r < M; r++) {\n            double sum = 0.0;\n            int rowStart = row[r];\n            int rowEnd = row[r + 1];\n            for (int i = rowStart; i < rowEnd; i++) {\n                sum += x[col[i]] * val[i];\n            }\n            y[r] = sum;\n        }\n    }\n}\n\n\n\n",
        1.006,
        1.006,
        1.0054749498304076,
        0.9957960928392272,
        1.0034304347826086,
        1.0033293938571763,
        20
    ],
    "2": [
        "package jnt.scimark2;\npublic static void matmult(double[] y, double[] val, int[] row, int[] col, double[] x, long NUM_ITERATIONS) {\n    int M = row.length - 1;\n\n    \n    for (long reps = 0; reps < NUM_ITERATIONS; reps++) {\n        java.util.stream.IntStream.range(0, M).parallel().forEach(r -> {\n            double sum = 0.0;\n            int rowStart = row[r];\n            int rowEnd = row[r + 1];\n            for (int i = rowStart; i < rowEnd; i++) {\n                sum += x[col[i]] * val[i];\n            }\n            y[r] = sum;\n        });\n    }\n}\n\n",
        0.171,
        0.491,
        0.4912898746702299,
        0.03508226060787845,
        0.49029565217391297,
        0.2708995341607766,
        18
    ]
}