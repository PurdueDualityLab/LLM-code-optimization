{
    "0": [
        "package jnt.scimark2;\n\npublic class MonteCarloOptimized {\n    final static int SEED = 113;\n\n    public static void main(String[] args) {\n        int cycles = 1073741824;\n        double result = integrate(cycles);\n        System.out.println(result);\n    } \n\n    public static double integrate(long Num_samples) {\n\n        Random R = new Random(SEED);\n        long under_curve = 0;\n        for (long count = 0; count < Num_samples; count++) {\n            double x = R.nextDouble();\n            double y = R.nextDouble();\n\n            if (x * x + y * y <= 1.0)\n                under_curve++;\n        }\n\n        return ((double) under_curve / Num_samples) * 4.0;\n    }\n}\n",
        808.119,
        16.395,
        49185997193.8,
        44493.6,
        0.061,
        1150.23,
        26
    ],
    "1": [
        "package jnt.scimark2;\n\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class MonteCarloOptimized {\n    final static int SEED = 113;\n\n    public static void main(String[] args) {\n        int cycles = 1073741824;\n        double result = integrate(cycles);\n        System.out.println(result);\n    }\n\n    public static double integrate(long Num_samples) {\n        \n        long under_curve = 0;\n        for (long count = 0; count < Num_samples; count++) {\n            \n            double x = ThreadLocalRandom.current().nextDouble();\n            double y = ThreadLocalRandom.current().nextDouble();\n\n            if (x * x + y * y <= 1.0)\n                under_curve++;\n        }\n\n        return ((double) under_curve / Num_samples) * 4.0;\n    }\n}",
        2.615,
        2.696,
        2.6955811519313904,
        1.002957459470182,
        2.6952131147540985,
        0.6487137355137668,
        28
    ],
    "2": [
        "package jnt.scimark2;\n\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.stream.LongStream;\n\npublic class MonteCarloOptimized {\n    final static int SEED = 113;\n\n    public static void main(String[] args) {\n        int cycles = 1073741824;\n        double result = integrate(cycles);\n        System.out.println(result);\n    }\n\n    public static double integrate(long Num_samples) {\n        long under_curve = LongStream.range(0, Num_samples)\n            .parallel()\n            .filter(count -> {\n                double x = ThreadLocalRandom.current().nextDouble();\n                double y = ThreadLocalRandom.current().nextDouble();\n                return x * x + y * y <= 1.0;\n            })\n            .count();\n\n        return ((double) under_curve / Num_samples) * 4.0;\n    }\n}",
        7.741,
        23.426,
        23.426327965106132,
        0.8755411425782786,
        23.420590163934424,
        7.379463237787225,
        27
    ]
}