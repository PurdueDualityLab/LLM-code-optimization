{
    "0": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 2e5 + 10;\nint f[maxn], g[maxn], ans[maxn];\n\nvoid init()\n{\n   for(int i = 0; i < maxn; i++)\n        f[i] = i, g[i] = i;\n}\n\nint getf(int *data, int u)\n{\n    if(data[u] == u) return u;\n    return data[u] = getf(data, data[u]);\n}\n\nvoid Merge(int *data, int u, int v)\n{\n    int t1 = getf(data, u);\n    int t2 = getf(data, v);\n    data[t2] = t1;\n}\n\nvector<int> root[maxn];\nmap<int, int> p;\n\nint main()\n{\n    int n, k, l, u, v;\n    scanf(\"%d %d %d\", &n, &k, &l);\n    init();\n    for(int i = 0; i < k; i++)\n    {\n        scanf(\"%d %d\", &u, &v);\n        Merge(f, u, v);\n    }\n    for(int i = 0; i < l; i++)\n    {\n        scanf(\"%d %d\", &u, &v);\n        Merge(g, u, v);\n    }\n\n    for(int i = 1; i <= n; i++)\n    {\n       root[getf(f, i)].push_back(i);\n    }\n    for(int i = 1;  i <= n; i++)\n    {\n         p.clear();\n        int len = root[i].size();\n        for(int j = 0; j < len; j++)\n        {\n            p[getf(g, root[i][j])]++;\n        }\n        for(int j = 0; j < len; j++)\n            ans[root[i][j]] += p[getf(g, root[i][j])];\n    }\n    for(int i = 1; i <= n; i++)\n        printf(\"%d%c\", ans[i], i == n ? '\\n' : ' ');\n}\n",
        3.296,
        0.02,
        58921116.992,
        48.308,
        50.984,
        62
    ],
    "1": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 2e5 + 10;\nint f[maxn], g[maxn], ans[maxn];\nint root_f[maxn];\nint root_count[maxn];\n\nvoid init() {\n    for(int i = 0; i < maxn; i++)\n        f[i] = g[i] = i;\n}\n\nint getf(int *data, int u) {\n    if(data[u] == u) return u;\n    return data[u] = getf(data, data[u]);\n}\n\nvoid Merge(int *data, int u, int v) {\n    int t1 = getf(data, u);\n    int t2 = getf(data, v);\n    if (t1 != t2) data[t2] = t1;\n}\n\nint main() {\n    int n, k, l, u, v;\n    scanf(\"%d %d %d\", &n, &k, &l);\n    init();\n\n    for(int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &u, &v);\n        Merge(f, u, v);\n    }\n    for(int i = 0; i < l; i++) {\n        scanf(\"%d %d\", &u, &v);\n        Merge(g, u, v);\n    }\n\n    \n    fill(root_f, root_f + n + 1, -1);\n    for(int i = 1; i <= n; i++) {\n        int root = getf(f, i);\n        if (root_f[root] == -1) root_f[root] = root;\n        root_f[i] = root_f[root];\n    }\n\n    for(int i = 1; i <= n; i++) {\n        int root_fi = root_f[i];\n        int root_g = getf(g, i);\n        root_count[root_g * (n + 1) + root_fi]++;\n    }\n\n    for(int i = 1; i <= n; i++) {\n        int root_fi = root_f[i];\n        int root_g = getf(g, i);\n        ans[i] = root_count[root_g * (n + 1) + root_fi];\n    }\n\n    for(int i = 1; i <= n; i++) \n        printf(\"%d%c\", ans[i], i == n ? '\\n' : ' ');\n\n    return 0;\n}",
        3.442,
        3.269,
        3.289,
        3.051,
        3.266,
        63
    ],
    "2": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 2e5 + 10;\nint f[maxn], g[maxn], ans[maxn];\nint rank_f[maxn], rank_g[maxn];\n\nvoid init() {\n    for (int i = 0; i < maxn; i++) {\n        f[i] = g[i] = i;\n        rank_f[i] = rank_g[i] = 1;\n    }\n}\n\nint getf(int *data, int u) {\n    if (data[u] != u) {\n        data[u] = getf(data, data[u]);\n    }\n    return data[u];\n}\n\nvoid Merge(int *data, int *rank, int u, int v) {\n    int root_u = getf(data, u);\n    int root_v = getf(data, v);\n    if (root_u != root_v) {\n        if (rank[root_u] < rank[root_v]) {\n            data[root_u] = root_v;\n        } else if (rank[root_u] > rank[root_v]) {\n            data[root_v] = root_u;\n        } else {\n            data[root_v] = root_u;\n            rank[root_u]++;\n        }\n    }\n}\n\nint main() {\n    int n, k, l;\n    scanf(\"%d %d %d\", &n, &k, &l);\n    init();\n\n    for (int i = 0; i < k; i++) {\n        int u, v;\n        scanf(\"%d %d\", &u, &v);\n        Merge(f, rank_f, u, v);\n    }\n    for (int i = 0; i < l; i++) {\n        int u, v;\n        scanf(\"%d %d\", &u, &v);\n        Merge(g, rank_g, u, v);\n    }\n\n    unordered_map<long long, int> root_count; \n    \n    auto calcIndex = [&](int a, int b) {\n        return 1LL * a * (n + 1) + b;\n    };\n\n    for (int i = 1; i <= n; i++) {\n        int root_fi = getf(f, i);\n        int root_gi = getf(g, i);\n        long long idx = calcIndex(root_fi, root_gi);\n        root_count[idx]++;\n    }\n\n    for (int i = 1; i <= n; i++) {\n        int root_fi = getf(f, i);\n        int root_gi = getf(g, i);\n        long long idx = calcIndex(root_fi, root_gi);\n        ans[i] = root_count[idx];\n    }\n\n    for (int i = 1; i <= n; i++) {\n        printf(\"%d%c\", ans[i], (i == n ? '\\n' : ' '));\n    }\n\n    return 0;\n}",
        2.68,
        2.594,
        2.605,
        4.584,
        2.592,
        78
    ]
}