{
    "0": [
        "#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\tstring S, T;\n\n\tcin >> S >> T;\n\n\tif (S.size() >= T.size())\n\t{\n\t\tfor (int i = 0; i <= S.size() - T.size(); i++)\n\t\t{\n\t\t\tif (T[0] == S[i])\n\t\t\t{\n\t\t\t\tif (T == S.substr(i, T.size()))\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%d\\n\", i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}",
        0.523,
        0.003,
        10247586.957,
        54.408,
        287.958,
        27
    ],
    "1": [
        "\n#include <string>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n\nvector<int> kmpPreprocess(const string& pattern) {\n    vector<int> lps(pattern.size(), 0);\n    int length = 0; \n    int i = 1;\n    while (i < pattern.size()) {\n        if (pattern[i] == pattern[length]) {\n            length++;\n            lps[i] = length;\n            i++;\n        } else { \n            if (length != 0) {\n                length = lps[length - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    return lps;\n}\n\n\nvoid kmpSearch(const string& text, const string& pattern) {\n    int m = pattern.size();\n    int n = text.size();\n    vector<int> lps = kmpPreprocess(pattern);\n    int i = 0; \n    int j = 0; \n    while (i < n) {\n        if (pattern[j] == text[i]) {\n            j++;\n            i++;\n        }\n        if (j == m) {\n            \n            printf(\"%d\\n\", i - j);\n            j = lps[j - 1];\n        } else if (i < n && pattern[j] != text[i]) { \n            if (j != 0) {\n                j = lps[j - 1];\n            } else {\n                i++;\n            }\n        }\n    }\n}\n\nint main() {\n    string S, T;\n    cin >> S >> T;\n    if (!T.empty() && S.size() >= T.size()) {  \n        kmpSearch(S, T);\n    }\n    return 0;\n}\n",
        1.013,
        1.001,
        1.001,
        3.648,
        1.001,
        63
    ],
    "2": [
        "\n#include <string>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n\nvector<int> kmpPreprocess(const string& pattern) {\n    int m = pattern.size();\n    vector<int> lps(m, 0);\n    int length = 0;\n    int i = 1;\n    while (i < m) {\n        if (pattern[i] == pattern[length]) {\n            length++;\n            lps[i] = length;\n            i++;\n        } else {\n            if (length != 0){\n                length = lps[length - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    return lps;\n}\n\n\nvoid kmpSearch(const string& text, const string& pattern) {\n    int n = text.size();\n    int m = pattern.size();\n    vector<int> lps = kmpPreprocess(pattern);\n    int i = 0; \n    int j = 0; \n    while (i < n) {\n        if (pattern[j] == text[i]) {\n            i++;\n            j++;\n        }\n        if (j == m) {\n            printf(\"%d\\n\", i - j);\n            j = lps[j - 1];\n        } else if (i < n && pattern[j] != text[i]) {\n            if (j != 0) {\n                j = lps[j - 1];\n            } else {\n                i++;\n            }\n        }\n    }\n}\n\nint main() {\n    string S, T;\n    cin >> S >> T;\n    if (S.size() >= T.size() && !T.empty()) {  \n        kmpSearch(S, T);\n    }\n    return 0;\n}\n",
        1.005,
        1.001,
        1.001,
        4.39,
        1.001,
        63
    ]
}