Task Instructions:
    1. Analyze the provided code
        - Review the code to find any inefficiencies or areas that can be improved.
        - Look for:
            - Algorithms that are slow (high time complexity)
            - Use of complex or expensive operations
            - Data dependencies that prevent instruction-level parallelism (ILP)
            - Algorithms that use large amounts of memory (high space complexity)
            - Unnecessary if-else or branching logic
            - Memory that is used or allocated inefficiently
    2. Determine Applicable Patterns
        - For each optimization pattern, using pattern description and example, determine if the pattern is applicable to the code.
    3. Rank the Applicable Patterns
        - Of the patterns that were deemed applicable in task (2), assess and rank how well each pattern addresses the inefficiencies found in code. Assign rank=1 for the best pattern and higher ranks for worse patterns.
        - Reason as to why one pattern is ranked over another.

Output Requirements:
    - For the applicable patterns: return the pattern name, description, example, rank, and reasoning for ranking.

Here is the code to analyze:
{{ code }}

Here are the optimization patterns to analyze:
{{ patterns }}
